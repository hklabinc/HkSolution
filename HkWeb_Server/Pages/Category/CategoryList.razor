@page "/category"

@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _JsRuntime

<_DeleteConfirmation IsParentComponentProcessing="IsLoading" OnConfirmationDelete="ConfirmDelete_Click"></_DeleteConfirmation>

<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Category List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="/category/create" class="btn btn-info form-control">Add New Category</a>
    </div>

    <div class="col-12">
        @if (Categories.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var objCat in Categories)
                    {
                        <tr>
                            <td>
                                @objCat.Name
                            </td>
                            <td>
                                <NavLink href="@($"category/edit/{objCat.Id}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(objCat.Id)">Delete</button>   @*파라미터를 전달해야 하면 ()=> 함수를 써야*@
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>
            }
            else
            {
                <p>No records found.</p>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();

    public bool IsLoading { get; set; }
    private int DeleteCategoryId { get; set; } = 0;

    //protected override void OnInitialized()     // DB에 내용이 많을때는 불러오는데 시간이 많이 걸리므로 async 메서드를 쓰는 것이 바람직함
    //{
    //    Categories = _categoryRepository.GetAll();
    //}

    //protected override async Task OnInitializedAsync()
    //{
    //    await Task.Run(LoadCategories);         // 다른 쓰레드로 돌리기 위해 아래와 같이 LoadCategories를 분리함
    //}

    protected override async Task OnAfterRenderAsync(bool firstRender)      // DB 내용이 많은 경우에는 이렇게 처리하는 것이 좋음
    {
        if (firstRender)
        {
            await LoadCategories();
        }        
    }

    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged(); 
        Categories = await _categoryRepository.GetAll();
        IsLoading = false;
        StateHasChanged();      //OnAfterRenderAsync 사용할 때 StateHasChanged 있어야
    }

    private void HandleDelete(int id)
    {
        DeleteCategoryId = id;
        _JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;

        if (isConfirmed && DeleteCategoryId != 0)
        {
            //await Task.Delay(5000);   // 임의로 지연을 줌
            // delete
            await _categoryRepository.Delete(DeleteCategoryId);
            await LoadCategories();
            await _JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
